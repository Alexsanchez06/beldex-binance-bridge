{"ast":null,"code":"var _jsxFileName = \"/home/nowfil/nowfil/company/beldex/loki-binance-bridge/loki-bridge/src/components/swapSelection/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Typography, Link } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Input, Button } from '@components';\nimport { SWAP_TYPE, TYPE } from '@constants';\nimport config from '@config';\nimport styles from './styles';\nimport { store, dispatcher, Actions, Events } from '@store';\nimport Swaptabs from './swapTabs';\nconst walletCreationUrl = {\n  [TYPE.BDX]: config.beldex.walletCreationUrl,\n  [TYPE.BNB]: config.binance.walletCreationUrl\n};\n\nclass SwapSelection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      store.on(Events.FETCHED_BALANCE, this.onBalUpdated);\n    };\n\n    this.onBalUpdated = () => {\n      const balance = store.getStore('balance') || {};\n\n      if (balance && balance.length > 0) {\n        const bal = Number(parseFloat(balance[0].movedBalance).toFixed(2)).toLocaleString('en', {\n          minimumFractionDigits: 2\n        });\n        const total = Number(parseFloat(balance[0].totalSupply).toFixed(2)).toLocaleString('en', {\n          minimumFractionDigits: 2\n        });\n\n        if (this.state.swapType == 'bdx_to_bbdx') {\n          if (total == bal) {\n            this.setState({\n              loginOpen: true\n            });\n          }\n        } else {\n          this.setState({\n            loginOpen: false\n          });\n        }\n\n        this.setState({\n          totalSupply: total,\n          movedBalance: bal\n        });\n      }\n    };\n\n    this.onNext = () => {\n      const address = this.state.address;\n      const onNext = this.props.onNext;\n      const isValidAddress = address && address.length > 0;\n      this.setState({\n        addressError: !isValidAddress\n      });\n      if (isValidAddress) onNext(address);\n    };\n\n    this.onAddressChanged = event => {\n      this.setState({\n        address: event.target.value\n      });\n    };\n\n    this.onSwapTypeChanged = value => {\n      this.props.onSwapTypeChanged(value);\n      this.setState({\n        swapType: value\n      });\n      dispatcher.dispatch({\n        type: Actions.GET_BALANCE\n      });\n    };\n\n    this.getAddressType = () => {\n      const swapType = this.props.swapType;\n      return swapType === SWAP_TYPE.BDX_TO_BBDX ? TYPE.BNB : TYPE.BDX;\n    };\n\n    this.loginClose = () => {\n      this.setState({\n        loginOpen: false\n      });\n    };\n\n    this.state = {\n      address: '',\n      addressError: false,\n      options: [{\n        value: SWAP_TYPE.BDX_TO_BBDX,\n        description: 'BDX to B-BDX'\n      }, {\n        value: SWAP_TYPE.BBDX_TO_BDX,\n        description: 'B-BDX to BDX'\n      }],\n      //loginOpen: props.totalSupply != props.movedBalance,\n      totalSupply: props.totalSupply,\n      movedBalance: props.movedBalance,\n      swapType: 'bdx_to_bbdx',\n      loginOpen: false\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          swapType = _this$props.swapType,\n          loading = _this$props.loading,\n          classes = _this$props.classes;\n    const _this$state = this.state,\n          options = _this$state.options,\n          address = _this$state.address,\n          addressError = _this$state.addressError,\n          movedBalance = _this$state.movedBalance,\n          totalSupply = _this$state.totalSupply;\n    const addressType = this.getAddressType();\n    const inputLabel = addressType === TYPE.BDX ? 'BDX Address' : 'BNB Address';\n    const inputPlaceholder = addressType === TYPE.BDX ? 'bdx...' : 'bbdx...';\n    const url = walletCreationUrl[addressType];\n    return React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.swapTabs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Swaptabs, {\n      handleChange: val => this.onSwapTypeChanged(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      className: classes.swapFee,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Swap Fee : \", this.props.info.fees && this.props.info.fees.bdx, \" \", \" \", \" BDX\"), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Input, {\n      fullWidth: true,\n      label: inputLabel,\n      placeholder: inputPlaceholder,\n      value: address,\n      error: addressError,\n      onChange: this.onAddressChanged,\n      disabled: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      className: classes.createAccount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(Link, {\n      style: {\n        color: '#000'\n      },\n      href: url,\n      target: \"_blank\",\n      rel: \"noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Don't have a wallet? create one\"))), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      align: \"right\",\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Button, {\n      fullWidth: true,\n      label: \"Next\",\n      loading: loading,\n      onClick: this.onNext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), React.createElement(Link, {\n      className: classes.belLink,\n      href: \"BBDXBridgeTOS.html\",\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Terms of Service\"), this.state.loginOpen && React.createElement(\"div\", {\n      className: \"warningText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"The maximum BDX swap limit was reached.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), \" You can buy BBDX from \", React.createElement(\"a\", {\n      href: \"https://testnet.binance.org/en/trade/mini/175-0B3M_BNB\",\n      style: {\n        color: '#67d040',\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Binance dex.\"))) // <LoginPopup open={this.state.loginOpen} loginClose={this.loginClose} />\n    );\n  }\n\n}\n\nSwapSelection.propTypes = {\n  classes: PropTypes.object.isRequired,\n  swapType: PropTypes.string.isRequired,\n  onSwapTypeChanged: PropTypes.func.isRequired,\n  onNext: PropTypes.func.isRequired,\n  loading: PropTypes.bool\n};\nexport default withStyles(styles)(SwapSelection);","map":{"version":3,"sources":["/home/nowfil/nowfil/company/beldex/loki-binance-bridge/loki-bridge/src/components/swapSelection/index.js"],"names":["React","Component","PropTypes","Grid","Typography","Link","withStyles","Input","Button","SWAP_TYPE","TYPE","config","styles","store","dispatcher","Actions","Events","Swaptabs","walletCreationUrl","BDX","beldex","BNB","binance","SwapSelection","constructor","props","componentDidMount","on","FETCHED_BALANCE","onBalUpdated","balance","getStore","length","bal","Number","parseFloat","movedBalance","toFixed","toLocaleString","minimumFractionDigits","total","totalSupply","state","swapType","setState","loginOpen","onNext","address","isValidAddress","addressError","onAddressChanged","event","target","value","onSwapTypeChanged","dispatch","type","GET_BALANCE","getAddressType","BDX_TO_BBDX","loginClose","options","description","BBDX_TO_BDX","render","loading","classes","addressType","inputLabel","inputPlaceholder","url","root","swapTabs","val","swapFee","info","fees","bdx","createAccount","color","button","belLink","textAlign","propTypes","object","isRequired","string","func","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Typography, Link } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Input, Button } from '@components';\nimport { SWAP_TYPE, TYPE } from '@constants';\nimport config from '@config';\nimport styles from './styles';\nimport { store, dispatcher, Actions, Events } from '@store';\nimport Swaptabs from './swapTabs';\n\nconst walletCreationUrl = {\n  [TYPE.BDX]: config.beldex.walletCreationUrl,\n  [TYPE.BNB]: config.binance.walletCreationUrl,\n};\n\nclass SwapSelection extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      address: '',\n      addressError: false,\n      options: [{\n        value: SWAP_TYPE.BDX_TO_BBDX,\n        description: 'BDX to B-BDX',\n      }, {\n        value: SWAP_TYPE.BBDX_TO_BDX,\n        description: 'B-BDX to BDX',\n      }],\n      //loginOpen: props.totalSupply != props.movedBalance,\n      totalSupply: props.totalSupply,\n      movedBalance: props.movedBalance,\n      swapType: 'bdx_to_bbdx',\n      loginOpen: false\n    };\n  }\n\n  componentDidMount = () => {\n    store.on(Events.FETCHED_BALANCE, this.onBalUpdated);\n  }\n\n  onBalUpdated = () => {\n    const balance = store.getStore('balance') || {};\n    if (balance && balance.length > 0) {\n      const bal = Number(parseFloat(balance[0].movedBalance).toFixed(2)).toLocaleString('en', {\n        minimumFractionDigits: 2\n      });\n      const total = Number(parseFloat(balance[0].totalSupply).toFixed(2)).toLocaleString('en', {\n        minimumFractionDigits: 2\n      })\n      if (this.state.swapType == 'bdx_to_bbdx') {\n        if (total == bal) {\n          this.setState({ loginOpen: true })\n        }\n      }\n      else {\n        this.setState({ loginOpen: false })\n      }\n      this.setState({\n        totalSupply: total,\n        movedBalance: bal\n      })\n    }\n  }\n\n  onNext = () => {\n    const { address } = this.state;\n    const { onNext } = this.props;\n\n    const isValidAddress = address && address.length > 0;\n    this.setState({ addressError: !isValidAddress });\n\n    if (isValidAddress) onNext(address);\n  }\n\n  onAddressChanged = (event) => {\n    this.setState({ address: event.target.value });\n  }\n\n  onSwapTypeChanged = (value) => {\n    this.props.onSwapTypeChanged(value);\n    this.setState({\n      swapType: value\n    })\n    dispatcher.dispatch({\n      type: Actions.GET_BALANCE\n    });\n  }\n\n  getAddressType = () => {\n    const { swapType } = this.props;\n    return swapType === SWAP_TYPE.BDX_TO_BBDX ? TYPE.BNB : TYPE.BDX;\n  }\n  loginClose = () => {\n    this.setState({ loginOpen: false })\n  }\n  render() {\n    const { swapType, loading, classes } = this.props;\n    const { options, address, addressError, movedBalance, totalSupply } = this.state;\n    const addressType = this.getAddressType();\n    const inputLabel = addressType === TYPE.BDX ? 'BDX Address' : 'BNB Address';\n    const inputPlaceholder = addressType === TYPE.BDX ? 'bdx...' : 'bbdx...';\n\n    const url = walletCreationUrl[addressType];\n    return (\n      <Grid item xs={12} className={classes.root}>\n\n        <Grid item xs={12} className={classes.swapTabs}>\n          <Swaptabs handleChange={(val) => this.onSwapTypeChanged(val)} />\n        </Grid>\n\n        <Grid item xs={12}>\n          {/* <Select\n            fullWidth\n            label=\"Swap Type\"\n            options={options}\n            value={swapType}\n            handleChange={this.onSwapTypeChanged}\n            disabled={loading}\n            className={classes.belSelect}\n          /> */}\n        </Grid>\n        <Typography className={classes.swapFee}>\n          Swap Fee : {this.props.info.fees && this.props.info.fees.bdx} {\" \"} BDX\n        </Typography>\n\n        <Grid item xs={12}>\n          <Input\n            fullWidth\n            label={inputLabel}\n            placeholder={inputPlaceholder}\n            value={address}\n            error={addressError}\n            onChange={this.onAddressChanged}\n            disabled={loading}\n          />\n          <Typography className={classes.createAccount}>\n            <Link style={{ color: '#000' }} href={url} target=\"_blank\" rel=\"noreferrer\">\n              Don't have a wallet? create one\n            </Link>\n          </Typography>\n        </Grid>\n        <Grid item xs={12} align='right' className={classes.button}>\n          <Button\n            fullWidth\n            label=\"Next\"\n            loading={loading}\n            onClick={this.onNext}\n          />\n        </Grid>\n        <Link className={classes.belLink} href=\"BBDXBridgeTOS.html\" target=\"_blank\">Terms of Service</Link>\n\n        {\n          this.state.loginOpen &&\n          <div className=\"warningText\">\n            <p>The maximum BDX swap limit was reached.<br></br> You can buy BBDX from <a href=\"https://testnet.binance.org/en/trade/mini/175-0B3M_BNB\" style={{ color: '#67d040', textAlign: 'center' }}>Binance dex.</a></p>\n          </div>\n          // <LoginPopup open={this.state.loginOpen} loginClose={this.loginClose} />\n\n        }\n\n      </Grid>\n    );\n  }\n}\n\nSwapSelection.propTypes = {\n  classes: PropTypes.object.isRequired,\n  swapType: PropTypes.string.isRequired,\n  onSwapTypeChanged: PropTypes.func.isRequired,\n  onNext: PropTypes.func.isRequired,\n  loading: PropTypes.bool,\n};\n\nexport default withStyles(styles)(SwapSelection);\n"]},"metadata":{},"sourceType":"module"}