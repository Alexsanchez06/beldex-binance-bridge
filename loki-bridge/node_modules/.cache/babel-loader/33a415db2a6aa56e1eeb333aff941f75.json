{"ast":null,"code":"var _jsxFileName = \"/home/nowfil/nowfil/company/beldex/loki-binance-bridge/loki-bridge/src/components/swap/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, Box } from '@material-ui/core';\nimport { Warning } from '@utils/error';\nimport { store, dispatcher, Actions, Events } from '@store';\nimport { SWAP_TYPE, TYPE } from '@constants';\nimport { SwapSelection, SwapInfo, SwapList } from '@components';\nimport styles from './styles';\nconst currencySymbols = {\n  [TYPE.LOKI]: 'LOKI',\n  [TYPE.BNB]: 'B-LOKI'\n};\n\nclass Swap extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false,\n      page: 0,\n      swapType: SWAP_TYPE.LOKI_TO_BLOKI,\n      address: '',\n      info: {},\n      swapInfo: {},\n      swaps: [],\n      unconfirmed: []\n    };\n\n    this.onError = error => {\n      const isWarning = error instanceof Warning;\n      const message = error.message;\n      const variant = isWarning ? 'warning' : 'error';\n      this.props.showMessage(message, variant);\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.onUnconfirmedTransactionsFetched = transactions => {\n      this.setState({\n        unconfirmed: transactions\n      });\n    };\n\n    this.onSwapsFetched = swaps => {\n      this.setState({\n        swaps,\n        loading: false\n      });\n    };\n\n    this.onTokenSwapped = swapInfo => {\n      this.setState({\n        swapInfo,\n        page: 1\n      });\n      setImmediate(() => this.getUnconfirmedTransactions());\n      setImmediate(() => this.getSwaps());\n    };\n\n    this.onTokenSwapFinalized = transactions => {\n      this.setState({\n        loading: false\n      });\n      const message = transactions.length === 1 ? 'Added 1 new swap' : \"Added \".concat(transactions.length, \" new swaps\");\n      this.props.showMessage(message, 'success');\n      setImmediate(() => this.getUnconfirmedTransactions());\n      setImmediate(() => this.getSwaps());\n    };\n\n    this.onInfoUpdated = () => {\n      this.setState({\n        info: store.getStore('info') || {}\n      });\n    };\n\n    this.onNext = () => {\n      switch (this.state.page) {\n        case 0:\n          this.swapToken();\n          break;\n\n        case 1:\n          this.finalizeSwap();\n          break;\n\n        default:\n      }\n    };\n\n    this.resetState = () => {\n      this.setState({\n        loading: false,\n        page: 0,\n        address: '',\n        swapInfo: {},\n        swaps: [],\n        unconfirmed: []\n      });\n    };\n\n    this.getUnconfirmedTransactions = () => {\n      const _this$state = this.state,\n            swapType = _this$state.swapType,\n            swapInfo = _this$state.swapInfo;\n      if (swapType !== SWAP_TYPE.LOKI_TO_BLOKI) return;\n      dispatcher.dispatch({\n        type: Actions.GET_UNCONFIRMED_LOKI_TXS,\n        content: {\n          uuid: swapInfo.uuid\n        }\n      });\n    };\n\n    this.getSwaps = () => {\n      const swapInfo = this.state.swapInfo;\n      dispatcher.dispatch({\n        type: Actions.GET_SWAPS,\n        content: {\n          uuid: swapInfo.uuid\n        }\n      });\n      this.setState({\n        loading: true\n      });\n    };\n\n    this.swapToken = () => {\n      const _this$state2 = this.state,\n            swapType = _this$state2.swapType,\n            address = _this$state2.address;\n      dispatcher.dispatch({\n        type: Actions.SWAP_TOKEN,\n        content: {\n          type: swapType,\n          address\n        }\n      });\n      this.setState({\n        loading: true\n      });\n    };\n\n    this.onRefresh = () => {\n      this.getUnconfirmedTransactions();\n      this.getSwaps();\n      this.finalizeSwap();\n    };\n\n    this.finalizeSwap = () => {\n      const swapInfo = this.state.swapInfo;\n      dispatcher.dispatch({\n        type: Actions.FINALIZE_SWAP_TOKEN,\n        content: {\n          uuid: swapInfo.uuid\n        }\n      });\n      this.setState({\n        loading: true\n      });\n    };\n\n    this.renderReceivingAmount = () => {\n      const classes = this.props.classes;\n      const _this$state3 = this.state,\n            swapType = _this$state3.swapType,\n            swaps = _this$state3.swaps,\n            info = _this$state3.info;\n      if (!swaps) return null;\n      const receivingCurrency = swapType === SWAP_TYPE.LOKI_TO_BLOKI ? TYPE.BNB : TYPE.LOKI;\n      const pendingSwaps = swaps.filter(s => s.transferTxHashes && s.transferTxHashes.length === 0);\n      const total = pendingSwaps.reduce((total, swap) => total + parseFloat(swap.amount), 0);\n      const fees = info.fees;\n      console.log(\"beldex:\", receivingCurrency);\n      const fee = fees && fees[receivingCurrency] || 0;\n      console.log(\"fee:\", fee);\n      const displayTotal = Math.max(0, total - fee) / 1e9;\n      return React.createElement(Box, {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.statTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Amount Due:\"), React.createElement(Typography, {\n        className: classes.statAmount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, displayTotal, \" \", currencySymbols[receivingCurrency]));\n    };\n\n    this.renderTransactions = () => {\n      const classes = this.props.classes;\n      const _this$state4 = this.state,\n            swaps = _this$state4.swaps,\n            unconfirmed = _this$state4.unconfirmed,\n            swapType = _this$state4.swapType;\n      const unconfirmedTxs = swapType === SWAP_TYPE.LOKI_TO_BLOKI ? unconfirmed : [];\n      const unconfirmedSwaps = unconfirmedTxs.map(({\n        hash,\n        amount,\n        created\n      }) => ({\n        uuid: hash,\n        type: SWAP_TYPE.LOKI_TO_BLOKI,\n        amount,\n        txHash: hash,\n        transferTxHashes: [],\n        created,\n        unconfirmed: true\n      }));\n      const merged = [...unconfirmedSwaps, ...swaps];\n      return React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(Box, {\n        display: \"flex\",\n        flexDirection: \"column\",\n        className: classes.section,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(Box, {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.transactionTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"Transactions\"), this.renderReceivingAmount()), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(SwapList, {\n        swaps: merged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }))));\n    };\n\n    this.renderSelection = () => {\n      const classes = this.props.classes;\n      const _this$state5 = this.state,\n            loading = _this$state5.loading,\n            swapType = _this$state5.swapType;\n      return React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(SwapSelection, {\n        swapType: swapType,\n        onSwapTypeChanged: swapType => this.setState({\n          swapType\n        }),\n        onNext: address => {\n          this.setState({\n            address\n          }); // Wait for state to refresh correctly\n\n          setImmediate(() => this.onNext());\n        },\n        loading: loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }));\n    };\n\n    this.renderInfo = () => {\n      const classes = this.props.classes;\n      const _this$state6 = this.state,\n            loading = _this$state6.loading,\n            swapType = _this$state6.swapType,\n            swapInfo = _this$state6.swapInfo,\n            info = _this$state6.info;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        className: classes.item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(SwapInfo, {\n        swapType: swapType,\n        swapInfo: swapInfo,\n        info: info,\n        onRefresh: this.onRefresh,\n        onBack: this.resetState,\n        loading: loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      })), this.renderTransactions());\n    };\n  }\n\n  componentWillMount() {\n    this.onInfoUpdated();\n    store.on(Events.ERROR, this.onError);\n    store.on(Events.FETCHED_INFO, this.onInfoUpdated);\n    store.on(Events.FETCHED_SWAPS, this.onSwapsFetched);\n    store.on(Events.FETCHED_UNCONFIRMED_LOKI_TXS, this.onUnconfirmedTransactionsFetched);\n    store.on(Events.TOKEN_SWAPPED, this.onTokenSwapped);\n    store.on(Events.TOKEN_SWAP_FINALIZED, this.onTokenSwapFinalized);\n  }\n\n  componentDidMount() {\n    dispatcher.dispatch({\n      type: Actions.GET_INFO\n    });\n  }\n\n  componentWillUnmount() {\n    store.removeListener(Events.ERROR, this.onError);\n    store.removeListener(Events.FETCHED_INFO, this.onInfoUpdated);\n    store.removeListener(Events.FETCHED_SWAPS, this.onSwapsFetched);\n    store.removeListener(Events.FETCHED_UNCONFIRMED_LOKI_TXS, this.onUnconfirmedTransactionsFetched);\n    store.removeListener(Events.TOKEN_SWAPPED, this.onTokenSwapped);\n    store.removeListener(Events.TOKEN_SWAP_FINALIZED, this.onTokenSwapFinalized);\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const page = this.state.page;\n    return React.createElement(Grid, {\n      container: true,\n      className: classes.root,\n      spacing: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, page === 0 && this.renderSelection(), page === 1 && this.renderInfo());\n  }\n\n}\n\nSwap.propTypes = {\n  classes: PropTypes.object.isRequired,\n  showMessage: PropTypes.func.isRequired\n};\nexport default withStyles(styles)(Swap);","map":{"version":3,"sources":["/home/nowfil/nowfil/company/beldex/loki-binance-bridge/loki-bridge/src/components/swap/index.js"],"names":["React","Component","PropTypes","withStyles","Grid","Typography","Box","Warning","store","dispatcher","Actions","Events","SWAP_TYPE","TYPE","SwapSelection","SwapInfo","SwapList","styles","currencySymbols","LOKI","BNB","Swap","state","loading","page","swapType","LOKI_TO_BLOKI","address","info","swapInfo","swaps","unconfirmed","onError","error","isWarning","message","variant","props","showMessage","setState","onUnconfirmedTransactionsFetched","transactions","onSwapsFetched","onTokenSwapped","setImmediate","getUnconfirmedTransactions","getSwaps","onTokenSwapFinalized","length","onInfoUpdated","getStore","onNext","swapToken","finalizeSwap","resetState","dispatch","type","GET_UNCONFIRMED_LOKI_TXS","content","uuid","GET_SWAPS","SWAP_TOKEN","onRefresh","FINALIZE_SWAP_TOKEN","renderReceivingAmount","classes","receivingCurrency","pendingSwaps","filter","s","transferTxHashes","total","reduce","swap","parseFloat","amount","fees","console","log","fee","displayTotal","Math","max","statTitle","statAmount","renderTransactions","unconfirmedTxs","unconfirmedSwaps","map","hash","created","txHash","merged","section","transactionTitle","renderSelection","item","renderInfo","componentWillMount","on","ERROR","FETCHED_INFO","FETCHED_SWAPS","FETCHED_UNCONFIRMED_LOKI_TXS","TOKEN_SWAPPED","TOKEN_SWAP_FINALIZED","componentDidMount","GET_INFO","componentWillUnmount","removeListener","render","root","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, Box } from '@material-ui/core';\nimport { Warning } from '@utils/error';\nimport { store, dispatcher, Actions, Events } from '@store';\nimport { SWAP_TYPE, TYPE } from '@constants';\nimport { SwapSelection, SwapInfo, SwapList } from '@components';\nimport styles from './styles';\n\nconst currencySymbols = {\n  [TYPE.LOKI]: 'LOKI',\n  [TYPE.BNB]: 'B-LOKI'\n};\n\nclass Swap extends Component {\n  state = {\n    loading: false,\n    page: 0,\n    swapType: SWAP_TYPE.LOKI_TO_BLOKI,\n    address: '',\n    info: {},\n    swapInfo: {},\n    swaps: [],\n    unconfirmed: [],\n  };\n\n  componentWillMount() {\n    this.onInfoUpdated();\n    store.on(Events.ERROR, this.onError);\n    store.on(Events.FETCHED_INFO, this.onInfoUpdated);\n    store.on(Events.FETCHED_SWAPS, this.onSwapsFetched);\n    store.on(Events.FETCHED_UNCONFIRMED_LOKI_TXS, this.onUnconfirmedTransactionsFetched);\n    store.on(Events.TOKEN_SWAPPED, this.onTokenSwapped);\n    store.on(Events.TOKEN_SWAP_FINALIZED, this.onTokenSwapFinalized);\n  }\n\n  componentDidMount() {\n    dispatcher.dispatch({ type: Actions.GET_INFO });\n  }\n\n  componentWillUnmount() {\n    store.removeListener(Events.ERROR, this.onError);\n    store.removeListener(Events.FETCHED_INFO, this.onInfoUpdated);\n    store.removeListener(Events.FETCHED_SWAPS, this.onSwapsFetched);\n    store.removeListener(Events.FETCHED_UNCONFIRMED_LOKI_TXS, this.onUnconfirmedTransactionsFetched);\n    store.removeListener(Events.TOKEN_SWAPPED, this.onTokenSwapped);\n    store.removeListener(Events.TOKEN_SWAP_FINALIZED, this.onTokenSwapFinalized);\n  }\n\n  onError = (error) => {\n    const isWarning = error instanceof Warning;\n    const message = error.message;\n    const variant = isWarning ? 'warning' : 'error';\n    this.props.showMessage(message, variant);\n    this.setState({ loading: false });\n  }\n\n  onUnconfirmedTransactionsFetched = (transactions) => {\n    this.setState({ unconfirmed: transactions });\n  }\n\n  onSwapsFetched = (swaps) => {\n    this.setState({ swaps, loading: false });\n  }\n\n  onTokenSwapped = (swapInfo) => {\n    this.setState({ swapInfo, page: 1 });\n    setImmediate(() => this.getUnconfirmedTransactions());\n    setImmediate(() => this.getSwaps());\n  }\n\n  onTokenSwapFinalized = (transactions) => {\n    this.setState({ loading: false });\n    const message = transactions.length === 1 ? 'Added 1 new swap' : `Added ${transactions.length} new swaps`;\n    this.props.showMessage(message, 'success');\n\n    setImmediate(() => this.getUnconfirmedTransactions());\n    setImmediate(() => this.getSwaps());\n  }\n\n  onInfoUpdated = () => {\n    this.setState({ info: store.getStore('info') || {} });\n  }\n\n  onNext = () => {\n    switch (this.state.page) {\n      case 0:\n        this.swapToken();\n        break;\n      case 1:\n        this.finalizeSwap();\n        break;\n      default:\n\n    }\n  }\n\n  resetState = () => {\n    this.setState({\n      loading: false,\n      page: 0,\n      address: '',\n      swapInfo: {},\n      swaps: [],\n      unconfirmed: [],\n    });\n  }\n\n  getUnconfirmedTransactions = () => {\n    const { swapType, swapInfo } = this.state;\n    if (swapType !== SWAP_TYPE.LOKI_TO_BLOKI) return;\n    dispatcher.dispatch({\n      type: Actions.GET_UNCONFIRMED_LOKI_TXS,\n      content: {\n        uuid: swapInfo.uuid\n      }\n    });\n  }\n\n  getSwaps = () => {\n    const { swapInfo } = this.state;\n    dispatcher.dispatch({\n      type: Actions.GET_SWAPS,\n      content: {\n        uuid: swapInfo.uuid\n      }\n    });\n    this.setState({ loading: true });\n  }\n\n  swapToken = () => {\n    const { swapType, address } = this.state;\n    dispatcher.dispatch({\n      type: Actions.SWAP_TOKEN,\n      content: {\n        type: swapType,\n        address\n      }\n    });\n    this.setState({ loading: true });\n  }\n\n  onRefresh = () => {\n    this.getUnconfirmedTransactions();\n    this.getSwaps();\n    this.finalizeSwap();\n  }\n\n  finalizeSwap = () => {\n    const { swapInfo } = this.state;\n    dispatcher.dispatch({\n      type: Actions.FINALIZE_SWAP_TOKEN,\n      content: {\n        uuid: swapInfo.uuid\n      }\n    });\n    this.setState({ loading: true });\n  }\n\n  renderReceivingAmount = () => {\n    const { classes } = this.props;\n    const { swapType, swaps, info } = this.state;\n    if (!swaps) return null;\n\n    const receivingCurrency = swapType === SWAP_TYPE.LOKI_TO_BLOKI ? TYPE.BNB : TYPE.LOKI;\n\n    const pendingSwaps = swaps.filter(s => s.transferTxHashes && s.transferTxHashes.length === 0);\n    const total = pendingSwaps.reduce((total, swap) => total + parseFloat(swap.amount), 0);\n\n    const { fees } = info;\n    console.log(\"beldex:\",receivingCurrency)\n    const fee = (fees && fees[receivingCurrency]) || 0;\n    console.log(\"fee:\",fee)\n    const displayTotal = Math.max(0, total - fee) / 1e9;\n\n    return (\n      <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n        <Typography className={classes.statTitle}>Amount Due:</Typography>\n        <Typography className={classes.statAmount}>{displayTotal} {currencySymbols[receivingCurrency]}</Typography>\n      </Box>\n    );\n  }\n\n  renderTransactions = () => {\n    const { classes } = this.props;\n    const { swaps, unconfirmed, swapType } = this.state;\n\n    const unconfirmedTxs = swapType === SWAP_TYPE.LOKI_TO_BLOKI ? unconfirmed : [];\n    const unconfirmedSwaps = unconfirmedTxs.map(({ hash, amount, created }) => ({\n      uuid: hash,\n      type: SWAP_TYPE.LOKI_TO_BLOKI,\n      amount,\n      txHash: hash,\n      transferTxHashes: [],\n      created,\n      unconfirmed: true,\n    }));\n\n    const merged = [...unconfirmedSwaps, ...swaps];\n\n    return (\n      <Grid item xs={12} md={6}>\n        <Box display=\"flex\" flexDirection=\"column\" className={classes.section}>\n          <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Typography className={classes.transactionTitle}>Transactions</Typography>\n            {this.renderReceivingAmount()}\n          </Box>\n          <Grid item xs={12}>\n            <SwapList swaps={merged}/>\n          </Grid>\n        </Box>\n      </Grid>\n    );\n  }\n\n  renderSelection = () => {\n    const { classes } = this.props;\n\n    const { loading, swapType } = this.state;\n\n    return (\n      <Grid item xs={12} className={classes.item}>\n        <SwapSelection\n          swapType={swapType}\n          onSwapTypeChanged={(swapType) => this.setState({ swapType })}\n          onNext={(address) => {\n            this.setState({ address });\n            // Wait for state to refresh correctly\n            setImmediate(() => this.onNext());\n          }}\n          loading={loading}\n        />\n      </Grid>\n    );\n  }\n\n  renderInfo = () => {\n    const { classes } = this.props;\n\n    const { loading, swapType, swapInfo, info } = this.state;\n\n    return (\n      <React.Fragment>\n        <Grid item xs={12} md={6} className={classes.item}>\n          <SwapInfo\n            swapType={swapType}\n            swapInfo={swapInfo}\n            info={info}\n            onRefresh={this.onRefresh}\n            onBack={this.resetState}\n            loading={loading}\n          />\n        </Grid>\n        {this.renderTransactions()}\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { page} = this.state;\n\n    return (\n      <Grid container className={classes.root} spacing={2}>\n        { page === 0 && this.renderSelection()}\n        { page === 1 && this.renderInfo()}\n      </Grid>\n    );\n  };\n}\n\nSwap.propTypes = {\n  classes: PropTypes.object.isRequired,\n  showMessage: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(Swap);\n"]},"metadata":{},"sourceType":"module"}