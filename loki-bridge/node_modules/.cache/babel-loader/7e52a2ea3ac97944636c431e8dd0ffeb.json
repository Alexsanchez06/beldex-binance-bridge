{"ast":null,"code":"import _slicedToArray from \"/home/nowfil/nowfil/company/beldex/loki-binance-bridge/loki-bridge/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/nowfil/nowfil/company/beldex/loki-binance-bridge/loki-bridge/src/components/swapSelection/loginpop.js\";\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport styles from './styles';\nimport { withStyles } from '@material-ui/core/styles';\nimport closeIcon from \"./close.svg\";\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return React.createElement(Slide, Object.assign({\n    direction: \"up\",\n    ref: ref\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }));\n});\n\nfunction LoginPopup(props) {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  const classes = props.classes;\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(Dialog, {\n    open: true,\n    TransitionComponent: Transition,\n    keepMounted: true,\n    onClose: handleClose,\n    \"aria-labelledby\": \"alert-dialog-slide-title\",\n    \"aria-describedby\": \"alert-dialog-slide-description\",\n    className: classes.LoginPopup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"alert-dialog-slide-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Use Google's location service?\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    id: \"alert-dialog-slide-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\")), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: props.loginClose,\n    color: \"primary\",\n    className: classes.closeBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: closeIcon,\n    style: {\n      filter: 'invert(1)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })))));\n}\n\nexport default withStyles(styles)(LoginPopup);","map":{"version":3,"sources":["/home/nowfil/nowfil/company/beldex/loki-binance-bridge/loki-bridge/src/components/swapSelection/loginpop.js"],"names":["React","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Slide","styles","withStyles","Transition","forwardRef","props","ref","LoginPopup","useState","open","setOpen","classes","handleClickOpen","handleClose","loginClose","closeBtn","closeIcon","filter"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAGA,MAAMC,UAAU,GAAGV,KAAK,CAACW,UAAN,CAAiB,SAASD,UAAT,CAAoBE,KAApB,EAA2BC,GAA3B,EAAgC;AAClE,SAAO,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAC,IAAjB;AAAsB,IAAA,GAAG,EAAEA;AAA3B,KAAoCD,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAFkB,CAAnB;;AAIA,SAASE,UAAT,CAAoBF,KAApB,EAA2B;AAAA,0BACDZ,KAAK,CAACe,QAAN,CAAe,KAAf,CADC;AAAA;AAAA,QAClBC,IADkB;AAAA,QACZC,OADY;;AAAA,QAEjBC,OAFiB,GAELN,KAFK,CAEjBM,OAFiB;;AAIzB,WAASC,eAAT,GAA2B;AACzBF,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD;;AAED,WAASG,WAAT,GAAuB;AACrBH,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAE,IADR;AAEE,IAAA,mBAAmB,EAAEP,UAFvB;AAGE,IAAA,WAAW,MAHb;AAIE,IAAA,OAAO,EAAEU,WAJX;AAKE,uBAAgB,0BALlB;AAME,wBAAiB,gCANnB;AAOE,IAAA,SAAS,EAAEF,OAAO,CAACJ,UAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,WAAD;AAAa,IAAA,EAAE,EAAC,0BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4C,gCAA5C,CATF,EAUE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD;AAAmB,IAAA,EAAE,EAAC,gCAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qIADF,CAVF,EAgBE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEF,KAAK,CAACS,UAAvB;AAAmC,IAAA,KAAK,EAAC,SAAzC;AAAmD,IAAA,SAAS,EAAEH,OAAO,CAACI,QAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEC,SAAV;AAAqB,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAE;AAAT,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAhBF,CAJF,CADF;AA6BD;;AAED,eAAef,UAAU,CAACD,MAAD,CAAV,CAAmBM,UAAnB,CAAf","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport styles from './styles';\nimport { withStyles } from '@material-ui/core/styles';\nimport closeIcon from './close.svg'\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction LoginPopup(props) {\n  const [open, setOpen] = React.useState(false);\n  const { classes } = props;\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      {/* <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        Slide in alert dialog\n      </Button> */}\n      <Dialog\n        open={true}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n        className={classes.LoginPopup}\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">{\"Use Google's location service?\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-slide-description\">\n            Let Google help apps determine location. This means sending anonymous location data to\n            Google, even when no apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.loginClose} color=\"primary\" className={classes.closeBtn}>\n            <img src={closeIcon} style={{filter: 'invert(1)'}} />\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(LoginPopup);\n"]},"metadata":{},"sourceType":"module"}