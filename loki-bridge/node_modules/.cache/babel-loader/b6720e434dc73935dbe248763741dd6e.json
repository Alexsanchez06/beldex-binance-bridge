{"ast":null,"code":"var _jsxFileName = \"/home/nowfil/nowfil/company/beldex/loki-binance-bridge/loki-bridge/src/components/swapSelection/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Typography, Link } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Input, Button, Select } from '@components';\nimport { SWAP_TYPE, TYPE } from '@constants';\nimport config from '@config';\nimport styles from './styles';\nimport LoginPopup from './loginpop';\nimport Swaptabs from './swapTabs';\nconst walletCreationUrl = {\n  [TYPE.BDX]: config.beldex.walletCreationUrl,\n  [TYPE.BNB]: config.binance.walletCreationUrl\n};\n\nclass SwapSelection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onNext = () => {\n      const address = this.state.address;\n      const onNext = this.props.onNext;\n      const isValidAddress = address && address.length > 0;\n      this.setState({\n        addressError: !isValidAddress\n      });\n      if (isValidAddress) onNext(address);\n    };\n\n    this.onAddressChanged = event => {\n      this.setState({\n        address: event.target.value\n      });\n    };\n\n    this.onSwapTypeChanged = value => {\n      this.props.onSwapTypeChanged(value);\n      console.log(value);\n\n      if (value == \"bdx_to_bbdx\") {//this.setState({loginOpen: true})\n      }\n    };\n\n    this.getAddressType = () => {\n      const swapType = this.props.swapType;\n      return swapType === SWAP_TYPE.BDX_TO_BBDX ? TYPE.BNB : TYPE.BDX;\n    };\n\n    this.loginClose = () => {\n      this.setState({\n        loginOpen: false\n      });\n    };\n\n    this.state = {\n      address: '',\n      addressError: false,\n      options: [{\n        value: SWAP_TYPE.BDX_TO_BBDX,\n        description: 'BDX to B-BDX'\n      }, {\n        value: SWAP_TYPE.BBDX_TO_BDX,\n        description: 'B-BDX to BDX'\n      }],\n      loginOpen: false\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          swapType = _this$props.swapType,\n          loading = _this$props.loading,\n          classes = _this$props.classes;\n    const _this$state = this.state,\n          options = _this$state.options,\n          address = _this$state.address,\n          addressError = _this$state.addressError;\n    const addressType = this.getAddressType();\n    const inputLabel = addressType === TYPE.BDX ? 'BDX Address' : 'BNB Address';\n    const inputPlaceholder = addressType === TYPE.BDX ? 'bdx...' : 'bbdx...';\n    const url = walletCreationUrl[addressType];\n    return React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.swapTabs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Swaptabs, {\n      handleChange: val => this.onSwapTypeChanged(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      className: classes.swapFee,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Swap Fee : \", this.props.info.fees && this.props.info.fees.bdx, \" \", \" \", \" BDX\"), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Input, {\n      fullWidth: true,\n      label: inputLabel,\n      placeholder: inputPlaceholder,\n      value: address,\n      error: addressError,\n      onChange: this.onAddressChanged,\n      disabled: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      className: classes.createAccount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Link, {\n      style: {\n        color: '#000'\n      },\n      href: url,\n      target: \"_blank\",\n      rel: \"noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Don't have a wallet? create one\"))), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      align: \"right\",\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Button, {\n      fullWidth: true,\n      label: \"Next\",\n      loading: loading,\n      onClick: this.onNext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })), React.createElement(Link, {\n      className: classes.belLink,\n      href: \"BBDXBridgeTOS.html\",\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Terms of Service\"), this.state.loginOpen && React.createElement(LoginPopup, {\n      open: this.state.loginOpen,\n      loginClose: this.loginClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }));\n  }\n\n}\n\nSwapSelection.propTypes = {\n  classes: PropTypes.object.isRequired,\n  swapType: PropTypes.string.isRequired,\n  onSwapTypeChanged: PropTypes.func.isRequired,\n  onNext: PropTypes.func.isRequired,\n  loading: PropTypes.bool\n};\nexport default withStyles(styles)(SwapSelection);","map":{"version":3,"sources":["/home/nowfil/nowfil/company/beldex/loki-binance-bridge/loki-bridge/src/components/swapSelection/index.js"],"names":["React","Component","PropTypes","Grid","Typography","Link","withStyles","Input","Button","Select","SWAP_TYPE","TYPE","config","styles","LoginPopup","Swaptabs","walletCreationUrl","BDX","beldex","BNB","binance","SwapSelection","constructor","props","onNext","address","state","isValidAddress","length","setState","addressError","onAddressChanged","event","target","value","onSwapTypeChanged","console","log","getAddressType","swapType","BDX_TO_BBDX","loginClose","loginOpen","options","description","BBDX_TO_BDX","render","loading","classes","addressType","inputLabel","inputPlaceholder","url","root","swapTabs","val","swapFee","info","fees","bdx","createAccount","color","button","belLink","propTypes","object","isRequired","string","func","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Typography, Link } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Input, Button, Select } from '@components';\nimport { SWAP_TYPE, TYPE } from '@constants';\nimport config from '@config';\nimport styles from './styles';\nimport LoginPopup from './loginpop';\nimport Swaptabs from './swapTabs';\n\nconst walletCreationUrl = {\n  [TYPE.BDX]: config.beldex.walletCreationUrl,\n  [TYPE.BNB]: config.binance.walletCreationUrl,\n};\n\nclass SwapSelection extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      address: '',\n      addressError: false,\n      options: [{\n        value: SWAP_TYPE.BDX_TO_BBDX,\n        description: 'BDX to B-BDX',\n      }, {\n        value: SWAP_TYPE.BBDX_TO_BDX,\n        description: 'B-BDX to BDX',\n      }],\n      loginOpen: false,\n    };\n  }\n\n\n  onNext = () => {\n    const { address } = this.state;\n    const { onNext } = this.props;\n\n    const isValidAddress = address && address.length > 0;\n    this.setState({ addressError: !isValidAddress });\n\n    if (isValidAddress) onNext(address);\n  }\n\n  onAddressChanged = (event) => {\n    this.setState({ address: event.target.value });\n  }\n\n  onSwapTypeChanged = (value) => {\n    this.props.onSwapTypeChanged(value);\n    console.log(value)\n    if (value == \"bdx_to_bbdx\") {\n      //this.setState({loginOpen: true})\n    }\n  }\n\n  getAddressType = () => {\n    const { swapType } = this.props;\n    return swapType === SWAP_TYPE.BDX_TO_BBDX ? TYPE.BNB : TYPE.BDX;\n  }\n  loginClose = () => {\n    this.setState({ loginOpen: false })\n  }\n  render() {\n    const { swapType, loading, classes } = this.props;\n    const { options, address, addressError } = this.state;\n    const addressType = this.getAddressType();\n    const inputLabel = addressType === TYPE.BDX ? 'BDX Address' : 'BNB Address';\n    const inputPlaceholder = addressType === TYPE.BDX ? 'bdx...' : 'bbdx...';\n\n    const url = walletCreationUrl[addressType];\n    return (\n      <Grid item xs={12} className={classes.root}>\n\n        <Grid item xs={12} className={classes.swapTabs}>\n          <Swaptabs handleChange={(val) => this.onSwapTypeChanged(val)} />\n        </Grid>\n\n        <Grid item xs={12}>\n          {/* <Select\n            fullWidth\n            label=\"Swap Type\"\n            options={options}\n            value={swapType}\n            handleChange={this.onSwapTypeChanged}\n            disabled={loading}\n            className={classes.belSelect}\n          /> */}\n        </Grid>\n        <Typography className={classes.swapFee}>\n          Swap Fee : {this.props.info.fees && this.props.info.fees.bdx} {\" \"} BDX\n        </Typography>\n\n        <Grid item xs={12}>\n          <Input\n            fullWidth\n            label={inputLabel}\n            placeholder={inputPlaceholder}\n            value={address}\n            error={addressError}\n            onChange={this.onAddressChanged}\n            disabled={loading}\n          />\n          <Typography className={classes.createAccount}>\n            <Link style={{ color: '#000' }} href={url} target=\"_blank\" rel=\"noreferrer\">\n              Don't have a wallet? create one\n            </Link>\n          </Typography>\n        </Grid>\n        <Grid item xs={12} align='right' className={classes.button}>\n          <Button\n            fullWidth\n            label=\"Next\"\n            loading={loading}\n            onClick={this.onNext}\n          />\n        </Grid>\n        <Link className={classes.belLink} href=\"BBDXBridgeTOS.html\" target=\"_blank\">Terms of Service</Link>\n\n        {\n          this.state.loginOpen &&\n          <LoginPopup open={this.state.loginOpen} loginClose={this.loginClose} />\n        }\n\n      </Grid>\n    );\n  }\n}\n\nSwapSelection.propTypes = {\n  classes: PropTypes.object.isRequired,\n  swapType: PropTypes.string.isRequired,\n  onSwapTypeChanged: PropTypes.func.isRequired,\n  onNext: PropTypes.func.isRequired,\n  loading: PropTypes.bool,\n};\n\nexport default withStyles(styles)(SwapSelection);\n"]},"metadata":{},"sourceType":"module"}