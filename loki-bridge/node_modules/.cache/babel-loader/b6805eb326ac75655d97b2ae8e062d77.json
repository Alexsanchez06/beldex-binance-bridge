{"ast":null,"code":"var _jsxFileName = \"/home/nowfil/nowfil/company/loki-binance-bridge/loki-bridge/src/components/swapList/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TimeAgo from 'timeago-react';\nimport dateformat from 'dateformat';\nimport { Grid, Typography, Box, Divider, Link } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport config from '@config';\nimport { SWAP_TYPE, TYPE } from '@constants';\nimport styles from './styles';\nconst hashUrls = {\n  [TYPE.LOKI]: config.loki.txExplorerUrl,\n  [TYPE.BNB]: config.binance.txExplorerUrl\n};\n\nclass SwapList extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderHash = (type, txHash, transferTxHashes) => {\n      const classes = this.props.classes;\n      const hasTransferHashes = transferTxHashes.length > 0;\n      const depositHashType = type === SWAP_TYPE.LOKI_TO_BLOKI ? TYPE.LOKI : TYPE.BNB;\n      const transferHashType = type === SWAP_TYPE.LOKI_TO_BLOKI ? TYPE.BNB : TYPE.LOKI;\n      const hashType = hasTransferHashes ? transferHashType : depositHashType;\n      const baseUrl = hashUrls[hashType];\n      const hashes = hasTransferHashes ? transferTxHashes : [txHash];\n      const hashItems = hashes.map(hash => {\n        const url = \"\".concat(baseUrl, \"/\").concat(hash);\n        return React.createElement(Typography, {\n          key: hash,\n          className: classes.hash,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, React.createElement(Link, {\n          href: url,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, hash));\n      });\n\n      if (transferTxHashes.length === 0) {\n        return React.createElement(Box, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          className: classes.hashTitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, \"Deposit Transaction Hash\"), hashItems[0]);\n      }\n\n      const swapTitle = transferTxHashes.length === 1 ? 'Swap Transaction Hash' : 'Swap Transaction Hashes';\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.hashTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, swapTitle), hashItems);\n    };\n\n    this.renderTime = created => {\n      const classes = this.props.classes;\n      const now = Date.now();\n      const timestamp = Date.parse(created);\n      const diff = Math.abs(now - timestamp);\n      const dayMs = 24 * 60 * 60 * 1000;\n      const showFullDate = diff > dayMs;\n\n      if (showFullDate) {\n        const formatted = dateformat(timestamp, 'dd/mm/yyyy');\n        return React.createElement(Typography, {\n          className: classes.time,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, formatted);\n      }\n\n      return React.createElement(TimeAgo, {\n        className: classes.time,\n        datetime: timestamp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      });\n    };\n\n    this.renderSwapItem = ({\n      uuid,\n      type,\n      amount,\n      txHash,\n      transferTxHashes,\n      created,\n      unconfirmed\n    }) => {\n      const classes = this.props.classes;\n      const isPending = transferTxHashes && transferTxHashes.length === 0;\n      const depositCurrency = type === SWAP_TYPE.LOKI_TO_BLOKI ? 'LOKI' : 'B-LOKI';\n      const displayAmount = amount / 1e9;\n      let status = 'Completed';\n\n      if (isPending) {\n        status = unconfirmed ? 'Waiting for Confirmations' : 'Pending';\n      }\n\n      return React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        key: uuid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(Box, {\n        className: classes.item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Box, {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.amount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, displayAmount, \" \", depositCurrency), React.createElement(Box, {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: isPending ? classes.pending : classes.completed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, status), React.createElement(Typography, {\n        className: classes.timeSeperator,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \" \\u2022 \"), this.renderTime(created))), React.createElement(Divider, {\n        variant: \"middle\",\n        className: classes.divider,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), this.renderHash(type, txHash, transferTxHashes)));\n    };\n\n    this.renderSwaps = () => {\n      const _this$props = this.props,\n            classes = _this$props.classes,\n            swaps = _this$props.swaps;\n\n      if (!swaps || swaps.length === 0) {\n        return React.createElement(Box, {\n          className: classes.item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          className: classes.emptyTitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, \"No Transactions Found\"));\n      }\n\n      return swaps.map(this.renderSwapItem);\n    };\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, this.renderSwaps()));\n  }\n\n}\n\nSwapList.propTypes = {\n  classes: PropTypes.object.isRequired,\n  swaps: PropTypes.array\n};\nexport default withStyles(styles)(SwapList);","map":{"version":3,"sources":["/home/nowfil/nowfil/company/loki-binance-bridge/loki-bridge/src/components/swapList/index.js"],"names":["React","Component","PropTypes","TimeAgo","dateformat","Grid","Typography","Box","Divider","Link","withStyles","config","SWAP_TYPE","TYPE","styles","hashUrls","LOKI","loki","txExplorerUrl","BNB","binance","SwapList","renderHash","type","txHash","transferTxHashes","classes","props","hasTransferHashes","length","depositHashType","LOKI_TO_BLOKI","transferHashType","hashType","baseUrl","hashes","hashItems","map","hash","url","hashTitle","swapTitle","renderTime","created","now","Date","timestamp","parse","diff","Math","abs","dayMs","showFullDate","formatted","time","renderSwapItem","uuid","amount","unconfirmed","isPending","depositCurrency","displayAmount","status","item","pending","completed","timeSeperator","divider","renderSwaps","swaps","emptyTitle","render","root","propTypes","object","isRequired","array"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TimeAgo from 'timeago-react';\nimport dateformat from 'dateformat';\nimport { Grid, Typography, Box, Divider, Link } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport config from '@config';\nimport { SWAP_TYPE, TYPE } from '@constants';\nimport styles from './styles';\n\nconst hashUrls = {\n  [TYPE.LOKI]: config.loki.txExplorerUrl,\n  [TYPE.BNB]: config.binance.txExplorerUrl,\n};\n\nclass SwapList extends Component {\n  renderHash = (type, txHash, transferTxHashes) => {\n    const { classes } = this.props;\n\n    const hasTransferHashes = transferTxHashes.length > 0;\n    const depositHashType = type === SWAP_TYPE.LOKI_TO_BLOKI ? TYPE.LOKI : TYPE.BNB;\n    const transferHashType = type === SWAP_TYPE.LOKI_TO_BLOKI ? TYPE.BNB : TYPE.LOKI;\n    const hashType = hasTransferHashes ? transferHashType : depositHashType;\n    const baseUrl = hashUrls[hashType];\n\n    const hashes = hasTransferHashes? transferTxHashes : [txHash];\n    const hashItems = hashes.map(hash => {\n      const url = `${baseUrl}/${hash}`;\n      return (\n        <Typography key={hash} className={classes.hash}>\n          <Link href={url} target=\"_blank\" rel=\"noreferrer\">\n            {hash}\n          </Link>\n        </Typography>\n      );\n    });\n\n    if(transferTxHashes.length === 0) {\n      return (\n        <Box>\n          <Typography className={classes.hashTitle}>Deposit Transaction Hash</Typography>\n          {hashItems[0]}\n        </Box>\n      );\n    }\n\n    const swapTitle = transferTxHashes.length === 1 ? 'Swap Transaction Hash' : 'Swap Transaction Hashes';\n    return (\n      <React.Fragment>\n        <Typography className={classes.hashTitle}>{swapTitle}</Typography>\n        {hashItems}\n      </React.Fragment>\n    );\n  }\n\n  renderTime = (created) => {\n    const { classes } = this.props;\n    const now = Date.now();\n    const timestamp = Date.parse(created);\n    const diff = Math.abs(now - timestamp);\n    const dayMs = 24 * 60 * 60 * 1000;\n\n    const showFullDate = diff > dayMs;\n    if (showFullDate) {\n      const formatted = dateformat(timestamp, 'dd/mm/yyyy');\n      return (\n        <Typography className={classes.time}>{formatted}</Typography>\n      );\n    }\n\n    return <TimeAgo className={classes.time} datetime={timestamp} />;\n  }\n\n  renderSwapItem = ({ uuid, type, amount, txHash, transferTxHashes, created, unconfirmed }) => {\n    const { classes } = this.props;\n\n    const isPending = transferTxHashes && transferTxHashes.length === 0;\n    const depositCurrency = type === SWAP_TYPE.LOKI_TO_BLOKI ? 'LOKI' : 'B-LOKI';\n    const displayAmount = amount / 1e9;\n\n    let status = 'Completed';\n    if (isPending) {\n      status = unconfirmed ? 'Waiting for Confirmations' : 'Pending';\n    }\n\n    return (\n      <Grid item xs={12} key={uuid}>\n        <Box className={classes.item}>\n          <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Typography className={classes.amount}>{displayAmount} {depositCurrency}</Typography>\n            <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n              <Typography className={isPending ? classes.pending : classes.completed}>\n                {status}\n              </Typography>\n              <Typography className={classes.timeSeperator}> • </Typography>\n              { this.renderTime(created) }\n            </Box>\n          </Box>\n          <Divider variant=\"middle\" className={classes.divider} />\n          { this.renderHash(type, txHash, transferTxHashes) }\n        </Box>\n      </Grid>\n    );\n  }\n\n  renderSwaps = () => {\n    const { classes, swaps } = this.props;\n    if (!swaps || swaps.length === 0) {\n      return (\n        <Box className={classes.item}>\n          <Typography className={classes.emptyTitle}>No Transactions Found</Typography>\n        </Box>\n      );\n    }\n\n    return swaps.map(this.renderSwapItem);\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <Grid item xs={ 12 } className={classes.root}>\n        <Grid container direction=\"column\" spacing={1}>\n          {this.renderSwaps()}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nSwapList.propTypes = {\n  classes: PropTypes.object.isRequired,\n  swaps: PropTypes.array\n};\n\nexport default withStyles(styles)(SwapList);\n"]},"metadata":{},"sourceType":"module"}