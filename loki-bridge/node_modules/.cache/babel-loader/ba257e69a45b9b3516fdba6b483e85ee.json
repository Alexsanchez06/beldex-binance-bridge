{"ast":null,"code":"var _jsxFileName = \"/home/nowfil/nowfil/company/beldex/loki-binance-bridge/loki-bridge/src/components/swapInfo/index.js\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport QRCode from 'qrcode.react';\nimport AnimateHeight from 'react-animate-height';\nimport { Grid, Typography, IconButton, Link, Tooltip, Box } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FileCopyOutlined as CopyIcon } from '@material-ui/icons';\nimport { Button, QRIcon } from '@components';\nimport { SWAP_TYPE } from '@constants';\nimport styles from './styles';\n\nclass SwapInfo extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showQR: false,\n      qrSize: 128\n    };\n\n    this.onCopy = id => {\n      var elm = document.getElementById(id);\n      let range; // for Internet Explorer\n\n      if (document.body.createTextRange) {\n        range = document.body.createTextRange();\n        range.moveToElementText(elm);\n        range.select();\n        document.execCommand('Copy');\n      } else if (window.getSelection) {\n        // other browsers\n        var selection = window.getSelection();\n        range = document.createRange();\n        range.selectNodeContents(elm);\n        selection.removeAllRanges();\n        selection.addRange(range);\n        document.execCommand('Copy');\n      }\n    };\n\n    this.onResize = () => {\n      const width = window.innerWidth;\n      const qrSize = width <= 600 ? 128 : 210;\n      this.setState({\n        qrSize\n      });\n    };\n\n    this.toggleQR = () => {\n      this.setState({\n        showQR: !this.state.showQR\n      });\n    };\n\n    this.renderQR = () => {\n      const _this$state = this.state,\n            showQR = _this$state.showQR,\n            qrSize = _this$state.qrSize;\n      const _this$props = this.props,\n            classes = _this$props.classes,\n            swapInfo = _this$props.swapInfo;\n      const depositAddress = swapInfo.depositAddress;\n      const height = showQR ? 'auto' : 0;\n      return React.createElement(AnimateHeight, {\n        duration: 250,\n        height: height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Box, {\n        className: classes.qrContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Box, {\n        className: classes.qr,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(QRCode, {\n        value: depositAddress,\n        renderAs: \"canvas\",\n        size: qrSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }))));\n    };\n\n    this.renderMemo = () => {\n      const _this$props2 = this.props,\n            classes = _this$props2.classes,\n            memo = _this$props2.swapInfo.memo;\n      if (!memo) return null;\n      return React.createElement(Box, {\n        className: classes.memoFrame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.warningText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"PLEASE READ CAREFULLY\"), React.createElement(Typography, {\n        id: \"memo\",\n        className: classes.memo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, memo), React.createElement(Tooltip, {\n        title: \"Copy Memo\",\n        placement: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: () => this.onCopy('memo'),\n        \"aria-label\": \"Copy Memo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(CopyIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }))), React.createElement(Typography, {\n        className: classes.instructionBold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"When creating the transaction, please paste the string above into the \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Memo\"), \" field. \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), \"Ensure that this is the only thing that you put in the field.\"), React.createElement(Typography, {\n        className: clsx(classes.warningText, classes.red),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"If done incorrectly then you will not receive \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"LOKI\"), \" into your designated address.\"));\n    };\n\n    this.renderDepositInstructions = () => {\n      const _this$props3 = this.props,\n            swapType = _this$props3.swapType,\n            classes = _this$props3.classes,\n            swapInfo = _this$props3.swapInfo;\n      const depositAddress = swapInfo.depositAddress;\n      const depositCurrency = swapType === SWAP_TYPE.BDX_TO_BBDX ? 'LOKI' : 'B-LOKI';\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.instructionBold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Transfer your \", depositCurrency), React.createElement(Typography, {\n        className: classes.instructions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"to\"), React.createElement(Typography, {\n        component: 'div',\n        className: classes.instructionBold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Box, {\n        id: \"depositAddress\",\n        className: classes.greenBorder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, depositAddress), React.createElement(Box, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"Copy Address\",\n        placement: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: () => this.onCopy('depositAddress'),\n        \"aria-label\": \"Copy Address\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(CopyIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }))), React.createElement(Tooltip, {\n        title: \"Toggle QR\",\n        placement: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        onClick: this.toggleQR,\n        \"aria-label\": \"Toggle QR\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(QRIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }))))), this.renderQR(), this.renderMemo());\n    };\n\n    this.renderInstructions = () => {\n      const _this$props4 = this.props,\n            swapType = _this$props4.swapType,\n            classes = _this$props4.classes,\n            info = _this$props4.info;\n      const beldexFee = info && info.fees && info.fees.beldex / 1e9 || 0;\n      return React.createElement(Box, {\n        className: classes.instructionContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, this.renderDepositInstructions(), swapType === SWAP_TYPE.BDX_TO_BBDX && React.createElement(Typography, {\n        className: classes.instructions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Note:\"), \" You will have to wait for the transaction to be checkpointed before you're added to our processing queue, this usually takes 8 blocks.\"), swapType === SWAP_TYPE.BBDX_TO_BDX && React.createElement(Typography, {\n        className: classes.instructionBold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"There will be a processing fee of \", beldexFee, \" LOKI which will be charged when processing all your pending swaps.\"), React.createElement(Typography, {\n        className: classes.instructions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"If you run into any trouble, or your swap request has not gone through, please contact @jpthor on telegram.\"));\n    };\n\n    this.renderReceivingAmount = () => {\n      const _this$props5 = this.props,\n            classes = _this$props5.classes,\n            swapType = _this$props5.swapType,\n            swapInfo = _this$props5.swapInfo;\n      if (!swapInfo || !swapInfo.swaps || swapInfo.swaps.length === 0) return null;\n      const receivingCurrency = swapType === SWAP_TYPE.BDX_TO_BBDX ? 'B-LOKI' : 'LOKI';\n      const pendingSwaps = swapInfo.swaps.filter(s => s.transferTxHashes && s.transferTxHashes.length === 0);\n      const total = pendingSwaps.reduce((total, swap) => total + parseFloat(swap.amount), 0);\n      const displayTotal = total / 1e9;\n      return React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        align: \"right\",\n        className: classes.stats,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.statTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"Pending Amount:\"), React.createElement(Typography, {\n        className: classes.statAmount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, displayTotal, \" \", receivingCurrency));\n    };\n  }\n\n  componentDidMount() {\n    // Run a timer every 10 seconds to refresh\n    this.timer = setInterval(this.props.onRefresh, 30 * 1000);\n    this.onResize();\n    window.addEventListener('resize', this.onResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize);\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const _this$props6 = this.props,\n          classes = _this$props6.classes,\n          loading = _this$props6.loading,\n          onRefresh = _this$props6.onRefresh,\n          onBack = _this$props6.onBack;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      align: \"left\",\n      className: classes.back,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(Link, {\n      className: classes.link,\n      onClick: onBack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"< Back\"))), this.renderInstructions(), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(Button, {\n      fullWidth: true,\n      label: \"Refresh\",\n      loading: loading,\n      onClick: onRefresh,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    })), React.createElement(Link, {\n      href: \"/tos/BLOKIBridgeTOS.html\",\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Terms of Service\"));\n  }\n\n}\n\nSwapInfo.propTypes = {\n  classes: PropTypes.object.isRequired,\n  swapType: PropTypes.string.isRequired,\n  swapInfo: PropTypes.object.isRequired,\n  info: PropTypes.object.isRequired,\n  onRefresh: PropTypes.func.isRequired,\n  onBack: PropTypes.func.isRequired,\n  loading: PropTypes.bool\n};\nexport default withStyles(styles)(SwapInfo);","map":{"version":3,"sources":["/home/nowfil/nowfil/company/beldex/loki-binance-bridge/loki-bridge/src/components/swapInfo/index.js"],"names":["React","PureComponent","PropTypes","clsx","QRCode","AnimateHeight","Grid","Typography","IconButton","Link","Tooltip","Box","withStyles","FileCopyOutlined","CopyIcon","Button","QRIcon","SWAP_TYPE","styles","SwapInfo","state","showQR","qrSize","onCopy","id","elm","document","getElementById","range","body","createTextRange","moveToElementText","select","execCommand","window","getSelection","selection","createRange","selectNodeContents","removeAllRanges","addRange","onResize","width","innerWidth","setState","toggleQR","renderQR","props","classes","swapInfo","depositAddress","height","qrContainer","qr","renderMemo","memo","memoFrame","warningText","instructionBold","red","renderDepositInstructions","swapType","depositCurrency","BDX_TO_BBDX","instructions","greenBorder","renderInstructions","info","beldexFee","fees","beldex","instructionContainer","BBDX_TO_BDX","renderReceivingAmount","swaps","length","receivingCurrency","pendingSwaps","filter","s","transferTxHashes","total","reduce","swap","parseFloat","amount","displayTotal","stats","statTitle","statAmount","componentDidMount","timer","setInterval","onRefresh","addEventListener","componentWillUnmount","removeEventListener","clearInterval","render","loading","onBack","root","back","link","button","propTypes","object","isRequired","string","func","bool"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from  'clsx';\nimport QRCode from 'qrcode.react';\nimport AnimateHeight from 'react-animate-height';\nimport { Grid, Typography, IconButton, Link, Tooltip, Box } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FileCopyOutlined as CopyIcon } from '@material-ui/icons';\nimport { Button, QRIcon } from '@components';\nimport { SWAP_TYPE } from '@constants';\nimport styles from './styles';\n\nclass SwapInfo extends PureComponent {\n  state = {\n    showQR: false,\n    qrSize: 128,\n  };\n\n  onCopy = (id) => {\n    var elm = document.getElementById(id);\n    let range;\n    // for Internet Explorer\n\n    if (document.body.createTextRange) {\n      range = document.body.createTextRange();\n      range.moveToElementText(elm);\n      range.select();\n      document.execCommand('Copy');\n    } else if (window.getSelection) {\n      // other browsers\n      var selection = window.getSelection();\n      range = document.createRange();\n      range.selectNodeContents(elm);\n      selection.removeAllRanges();\n      selection.addRange(range);\n      document.execCommand('Copy');\n    }\n  };\n\n  componentDidMount() {\n    // Run a timer every 10 seconds to refresh\n    this.timer = setInterval(this.props.onRefresh, 30 * 1000);\n\n    this.onResize();\n    window.addEventListener('resize', this.onResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize);\n    clearInterval(this.timer);\n  }\n\n  onResize = () => {\n    const width = window.innerWidth;\n    const qrSize = (width <= 600) ? 128 : 210;\n    this.setState({ qrSize });\n  }\n\n  toggleQR = () => {\n    this.setState({ showQR: !this.state.showQR });\n  }\n\n  renderQR = () => {\n    const { showQR, qrSize } = this.state;\n    const { classes, swapInfo } = this.props;\n    const { depositAddress } = swapInfo;\n    const height = showQR ? 'auto' : 0;\n\n    return (\n      <AnimateHeight\n        duration={250}\n        height={height}\n      >\n        <Box className={classes.qrContainer}>\n          <Box className={classes.qr}>\n            <QRCode value={depositAddress} renderAs='canvas' size={qrSize} />\n          </Box>\n        </Box>\n      </AnimateHeight>\n    );\n  }\n\n  renderMemo = () => {\n    const { classes, swapInfo: { memo }} = this.props;\n    if (!memo) return null;\n\n    return (\n      <Box className={classes.memoFrame}>\n        <Typography className={classes.warningText}>\n          PLEASE READ CAREFULLY\n        </Typography>\n        <Typography id='memo' className={classes.memo}>\n          {memo}\n        </Typography>\n        <Tooltip title=\"Copy Memo\" placement=\"right\">\n          <IconButton onClick={() => this.onCopy('memo')} aria-label=\"Copy Memo\">\n            <CopyIcon/>\n          </IconButton>\n        </Tooltip>\n        <Typography className={classes.instructionBold}>\n          When creating the transaction, please paste the string above into the <b>Memo</b> field. <br/>\n          Ensure that this is the only thing that you put in the field.\n        </Typography>\n        <Typography className={clsx(classes.warningText, classes.red)}>\n          If done incorrectly then you will not receive <b>LOKI</b> into your designated address.\n        </Typography>\n      </Box>\n    );\n  }\n\n  renderDepositInstructions = () => {\n    const { swapType, classes, swapInfo } = this.props;\n\n    const { depositAddress } = swapInfo;\n    const depositCurrency = swapType === SWAP_TYPE.BDX_TO_BBDX ? 'LOKI' : 'B-LOKI';\n\n    return (\n      <React.Fragment>\n        <Typography className={ classes.instructionBold }>\n            Transfer your {depositCurrency}\n        </Typography>\n        <Typography className={ classes.instructions }>\n            to\n        </Typography>\n        <Typography component={'div'} className={ classes.instructionBold }>\n          <Box id='depositAddress' className={classes.greenBorder}>{depositAddress}</Box>\n          <Box>\n            <Tooltip title=\"Copy Address\" placement=\"left\">\n              <IconButton onClick={() => this.onCopy('depositAddress')} aria-label=\"Copy Address\">\n                <CopyIcon/>\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Toggle QR\" placement=\"right\">\n              <IconButton onClick={this.toggleQR} aria-label=\"Toggle QR\">\n                <QRIcon />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Typography>\n        {this.renderQR() }\n        {this.renderMemo() }\n      </React.Fragment>\n    );\n  }\n\n  renderInstructions = () => {\n    const { swapType, classes, info } = this.props;\n\n    const beldexFee = (info && info.fees && info.fees.beldex / 1e9) || 0;\n\n    return (\n      <Box className={classes.instructionContainer}>\n        {this.renderDepositInstructions()}\n        { swapType === SWAP_TYPE.BDX_TO_BBDX && (\n          <Typography className={ classes.instructions }>\n            <b>Note:</b> You will have to wait for the transaction to be checkpointed before you're added to our processing queue, this usually takes 8 blocks.\n          </Typography>\n        )}\n        { swapType === SWAP_TYPE.BBDX_TO_BDX && (\n          <Typography className={ classes.instructionBold }>\n              There will be a processing fee of {beldexFee} LOKI which will be charged when processing all your pending swaps.\n          </Typography>\n        )}\n        <Typography className={ classes.instructions }>\n            If you run into any trouble, or your swap request has not gone through, please contact @jpthor on telegram.\n        </Typography>\n      </Box>\n    );\n  }\n\n  renderReceivingAmount = () => {\n    const { classes, swapType, swapInfo } = this.props;\n    if (!swapInfo || !swapInfo.swaps || swapInfo.swaps.length === 0) return null;\n\n    const receivingCurrency = swapType === SWAP_TYPE.BDX_TO_BBDX ? 'B-LOKI' : 'LOKI';\n\n    const pendingSwaps = swapInfo.swaps.filter(s => s.transferTxHashes && s.transferTxHashes.length === 0);\n    const total = pendingSwaps.reduce((total, swap) => total + parseFloat(swap.amount), 0);\n    const displayTotal = total / 1e9;\n\n    return (\n      <Grid item xs={ 12 } align='right' className={ classes.stats }>\n        <Typography className={classes.statTitle}>Pending Amount:</Typography>\n        <Typography className={classes.statAmount}>{displayTotal} {receivingCurrency}</Typography>\n      </Grid>\n    );\n  }\n\n  render() {\n    const { classes, loading, onRefresh, onBack } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <Grid item xs={ 12 } align='left' className={ classes.back }>\n          <Typography>\n            <Link className={classes.link} onClick={onBack}>\n              &lt; Back\n            </Link>\n          </Typography>\n        </Grid>\n        {this.renderInstructions()}\n        <Grid item xs={12} className={classes.button}>\n          <Button\n            fullWidth\n            label=\"Refresh\"\n            loading={loading}\n            onClick={onRefresh}\n          />\n        </Grid>\n        <Link href=\"/tos/BLOKIBridgeTOS.html\" target=\"_blank\">Terms of Service</Link>\n      </div>\n    );\n  }\n}\n\nSwapInfo.propTypes = {\n  classes: PropTypes.object.isRequired,\n  swapType: PropTypes.string.isRequired,\n  swapInfo: PropTypes.object.isRequired,\n  info: PropTypes.object.isRequired,\n  onRefresh: PropTypes.func.isRequired,\n  onBack: PropTypes.func.isRequired,\n  loading: PropTypes.bool,\n};\n\nexport default withStyles(styles)(SwapInfo);\n"]},"metadata":{},"sourceType":"module"}