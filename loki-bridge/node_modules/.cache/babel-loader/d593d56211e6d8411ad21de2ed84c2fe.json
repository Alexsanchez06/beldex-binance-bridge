{"ast":null,"code":"import crypto from 'crypto';\nimport sha256 from 'sha256';\nimport * as bip39 from 'bip39';\nexport function encrypt(data, url) {\n  const signJson = JSON.stringify(data);\n  const signMnemonic = bip39.generateMnemonic();\n  const cipher = crypto.createCipher('aes-256-cbc', signMnemonic);\n  const signEncrypted = cipher.update(signJson, 'utf8', 'base64') + cipher.final('base64');\n  let signData = {\n    e: toHex(signEncrypted),\n    m: toHex(signMnemonic),\n    u: sha256(url).toUpperCase(),\n    p: sha256(sha256(url).toUpperCase()).toUpperCase(),\n    t: new Date().getTime()\n  };\n  const signSeed = JSON.stringify(signData);\n  const signSignature = sha256(signSeed);\n  signData.s = signSignature;\n  return signData;\n}\n\nfunction toHex(str) {\n  let result = '';\n\n  for (let i = 0; i < str.length; i += 1) {\n    result += str.charCodeAt(i).toString(16);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/home/nowfil/nowfil/company/loki-binance-bridge/loki-bridge/src/utils/crypto.js"],"names":["crypto","sha256","bip39","encrypt","data","url","signJson","JSON","stringify","signMnemonic","generateMnemonic","cipher","createCipher","signEncrypted","update","final","signData","e","toHex","m","u","toUpperCase","p","t","Date","getTime","signSeed","signSignature","s","str","result","i","length","charCodeAt","toString"],"mappings":"AACA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,GAAvB,EAA4B;AACjC,QAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAjB;AACA,QAAMK,YAAY,GAAGP,KAAK,CAACQ,gBAAN,EAArB;AACA,QAAMC,MAAM,GAAGX,MAAM,CAACY,YAAP,CAAoB,aAApB,EAAmCH,YAAnC,CAAf;AACA,QAAMI,aAAa,GACjBF,MAAM,CAACG,MAAP,CAAcR,QAAd,EAAwB,MAAxB,EAAgC,QAAhC,IAA4CK,MAAM,CAACI,KAAP,CAAa,QAAb,CAD9C;AAGA,MAAIC,QAAQ,GAAG;AACbC,IAAAA,CAAC,EAAEC,KAAK,CAACL,aAAD,CADK;AAEbM,IAAAA,CAAC,EAAED,KAAK,CAACT,YAAD,CAFK;AAGbW,IAAAA,CAAC,EAAEnB,MAAM,CAACI,GAAD,CAAN,CAAYgB,WAAZ,EAHU;AAIbC,IAAAA,CAAC,EAAErB,MAAM,CAACA,MAAM,CAACI,GAAD,CAAN,CAAYgB,WAAZ,EAAD,CAAN,CAAkCA,WAAlC,EAJU;AAKbE,IAAAA,CAAC,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AALU,GAAf;AAQA,QAAMC,QAAQ,GAAGnB,IAAI,CAACC,SAAL,CAAeQ,QAAf,CAAjB;AACA,QAAMW,aAAa,GAAG1B,MAAM,CAACyB,QAAD,CAA5B;AACAV,EAAAA,QAAQ,CAACY,CAAT,GAAaD,aAAb;AAEA,SAAOX,QAAP;AACD;;AAED,SAASE,KAAT,CAAeW,GAAf,EAAoB;AAClB,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,IAAI,CAArC,EAAwC;AACtCD,IAAAA,MAAM,IAAID,GAAG,CAACI,UAAJ,CAAeF,CAAf,EAAkBG,QAAlB,CAA2B,EAA3B,CAAV;AACD;;AACD,SAAOJ,MAAP;AACD","sourcesContent":["\nimport crypto from 'crypto';\nimport sha256 from 'sha256';\nimport * as bip39 from 'bip39';\n\nexport function encrypt(data, url) {\n  const signJson = JSON.stringify(data);\n  const signMnemonic = bip39.generateMnemonic();\n  const cipher = crypto.createCipher('aes-256-cbc', signMnemonic);\n  const signEncrypted =\n    cipher.update(signJson, 'utf8', 'base64') + cipher.final('base64');\n\n  let signData = {\n    e: toHex(signEncrypted),\n    m: toHex(signMnemonic),\n    u: sha256(url).toUpperCase(),\n    p: sha256(sha256(url).toUpperCase()).toUpperCase(),\n    t: new Date().getTime()\n  };\n\n  const signSeed = JSON.stringify(signData);\n  const signSignature = sha256(signSeed);\n  signData.s = signSignature;\n\n  return signData;\n}\n\nfunction toHex(str) {\n  let result = '';\n  for (let i = 0; i < str.length; i += 1) {\n    result += str.charCodeAt(i).toString(16);\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}